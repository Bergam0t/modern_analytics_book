[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HSMA - Modern Analytics",
    "section": "",
    "text": "Preface\nWelcome to the HSMA book of modern analytics.\nIn many ways, everything taught on the HSMA course is modern analytics! From module 2 on discrete event simulation to module 7 on collaborative development with github and web app development, the role of the analyst is becoming ever broader.\nSo why a module on modern analytics?\nThis module allows us to include a range of techniques that can contribute to your toolkit as an analyst.\nWe’ll also talk a little bit about what analytics and data science is and how to ensure its potential is maximised in organisations.\nWe’ll be covering a range of techniques.\n\nCreating documents with Quarto to allow you to automate analysis\nWriting tests to ensure your code is working as expected\nWorking with data from production sources, such as SQL databases\nAutomating the production of spreadsheets and slide packs\nForecasting future trends with\n\ntime series analysis (including naive forecasts, ARIMA, and Prophet)\nmachine learning\nsimulation\n\nProcess mining with the pm4py library\n\nWe’ll also provide a high-level overview on a range of other things it’s useful for the modern analyst to know about. We don’t have time to teach them all in the depth we’d like, but we can certainly point you in the direction of some resources to help you with all of the following:\n\nStatistics\n\ntests, such as\n\nt-tests\nchi-squared\nANOVA\n\nconcepts, such as\n\np-values\nconfidence intervals\n\nhow to use statistics appropriately, such as\n\nanalysis plans\ncorrecting for multiple comparisons\n\nBayesian vs Frequentist statistics\n\nWorking with time-to-event data\nGrabbing data from APIs, or from the wider web using web scraping\nThe R programming language and why you might want to learn it\nAssociation Rule Learning\nNetwork analysis\nWorking with ‘big’ data\nWorking with R and Python in other tools (e.g. PowerBI)\nCausal Analysis",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "about_this_section.html",
    "href": "about_this_section.html",
    "title": "1  About This Section",
    "section": "",
    "text": "While this module gets the title modern analytics, you could argue that all of our other content on HSMA comes under that umbrella too!\nIt’s really part of your wider analytics toolkit.\nAs you head through this section, you will find links to the various HSMA books, videos, and code repositories relating to the topics taught on the course.\nApart from the introductory Python - as all of the techniques in the modern analytics module require a reasonable beginner/intermediate understanding of the Python programming language - none of these are prerequisites for this module - but they will enhance what you can create as an analyst.",
    "crumbs": [
      "Skills So Far",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>About This Section</span>"
    ]
  },
  {
    "objectID": "programming_in_python.html",
    "href": "programming_in_python.html",
    "title": "2  Programming in Python",
    "section": "",
    "text": "As a prerequisite to almost all of the other material we teach, you will need to have a good grasp of the basics of Python programming.\n\n\n\n\n\n\nTip\n\n\n\nYou don’t need to be a Python master before progressing through the rest of the material!\nWe do also use two non-Python tools\n\nQGIS in the geographic visualisation section (though more advanced visuals and optimisation problems are carried out in Python)\nsystem dynamics (which uses the online tool ‘Insight Maker’)\n\nTo move onto later modules, it’s recommended that you have some familiarity with\n\nvariables\nkey Python data types, including lists and dictionaries\nimporting packages\nusing functions\nwriting functions\nconditional logic (if, elif, else)\nloops (while loops, for loops)\nreading text and data files\nsimple data manipulation with the pandas library\nsimple data visualisation with the matplotlib or plotly.express libraries\n\nFor discrete event simulation and agent-based simulation, it is recommended that you have an understanding of object-oriented programming in Python.\nAll of these topics are covered in the book - take a look and consider refreshing your memory before moving on.\n\n\nClick here to open the HSMA Intro to Python book in a new tab, or take a look at it below.",
    "crumbs": [
      "Skills So Far",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming in Python</span>"
    ]
  },
  {
    "objectID": "des.html",
    "href": "des.html",
    "title": "3  Discrete Event Simulation",
    "section": "",
    "text": "Discrete Event Simulation (DES) allows you to model queueing problems. This can be useful for creating a simulated version of a healthcare system, allowing you to explore the impact of changing things like the number of resources available or the length of time a procedure takes.\nClick here to open the little book of DES in a new tab, or take a look at it below.",
    "crumbs": [
      "Skills So Far",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Discrete Event Simulation</span>"
    ]
  },
  {
    "objectID": "geographic_visualization_modelling.html",
    "href": "geographic_visualization_modelling.html",
    "title": "4  Geographic Visualisation and Optimization Problems",
    "section": "",
    "text": "Geographic visualisation is a powerful and often underestimated tool.\nWe cover how to produce maps in both QGIS (a free and open source equivalent to tools like ArcGIS) - which is more user-friendly and doesn’t require any knowledge of Python - as well as how to produce both static and interactive maps in Python.\nWe also cover how to tackle location optimization problems in Python - ensuring any new services are placed in the optimal location to minimize an objective such as the overall travel time for an area - and interact with travel time APIs to pull back travel time data at scale.\nClick here to open the HSMA Geographic Modelling and Visualisation book in a new tab, or take a look at it below.",
    "crumbs": [
      "Skills So Far",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Geographic Visualisation and Optimization Problems</span>"
    ]
  },
  {
    "objectID": "machine_learning.html",
    "href": "machine_learning.html",
    "title": "5  Machine Learning",
    "section": "",
    "text": "Machine learning encompasses techniques such as logistic regression, decision trees, random forests, boosted trees and neural networks. We cover how to use all of these techniques to develop predictive models.\nWhile we don’t have a full book on this topic, what we do have is a page that collates all of the lectures and repository links into a single place, as well as collating all of the example notebooks.\nClick here to open the HSMA Machine Learning Collection in a new tab, or take a look at it below.",
    "crumbs": [
      "Skills So Far",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Machine Learning</span>"
    ]
  },
  {
    "objectID": "natural_language_processing.html",
    "href": "natural_language_processing.html",
    "title": "6  Natural Language Processing",
    "section": "",
    "text": "6.1 5A - Introduction to Natural Language Processing (NLP)\nIn this session we’ll begin Module 5 and our journey into Natural Language Processing.\nWe’ll look at some core concepts important for processing text data, and learn a few little neat things we can do with our data along the way, including wordclouds and a method for assessing the similarity of different bits of text.\nRepository Link",
    "crumbs": [
      "Skills So Far",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Natural Language Processing</span>"
    ]
  },
  {
    "objectID": "natural_language_processing.html#b---named-entity-recognition",
    "href": "natural_language_processing.html#b---named-entity-recognition",
    "title": "6  Natural Language Processing",
    "section": "6.2 5B - Named Entity Recognition",
    "text": "6.2 5B - Named Entity Recognition\n\nIn this session we’ll continue our journey into Natural Language Processing.\nHave you got named entities? Do you need them recognised? Then have we got the session for you! Our session on Named Entity Recognition will talk all about named entities, and recognition of them. Along the way we’ll stop by Sesame Street and Fraggle Rock, talk about Transformers, Parsing, Grammar, POS Tagging and more.\n\nRepository Link",
    "crumbs": [
      "Skills So Far",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Natural Language Processing</span>"
    ]
  },
  {
    "objectID": "natural_language_processing.html#c---sentiment-analysis",
    "href": "natural_language_processing.html#c---sentiment-analysis",
    "title": "6  Natural Language Processing",
    "section": "6.3 5C - Sentiment Analysis",
    "text": "6.3 5C - Sentiment Analysis\n\nIn this session we don our pirate outfits and sail to the Caribbean as we look for the secret of Sentiment Analysis and Text Classification. We’ll fight dastardly pirates as well as a pirate that’s already dead but just won’t accept it.\n\nRepository Link",
    "crumbs": [
      "Skills So Far",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Natural Language Processing</span>"
    ]
  },
  {
    "objectID": "system_dynamics_agent_based_simulation.html",
    "href": "system_dynamics_agent_based_simulation.html",
    "title": "7  (Coming Soon!) System Dynamics and Agent Based Simulation",
    "section": "",
    "text": "Coming Soon!\nMaterials from the previous round of the programme (HSMA 5) can be found on our Youtube channel.",
    "crumbs": [
      "Skills So Far",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>(Coming Soon!) System Dynamics and Agent Based Simulation</span>"
    ]
  },
  {
    "objectID": "git_and_github.html",
    "href": "git_and_github.html",
    "title": "8  (Coming Soon!) Git and Github",
    "section": "",
    "text": "These sessions are being revamped - they will be delivered in September 2024.",
    "crumbs": [
      "Skills So Far",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>(Coming Soon!) Git and Github</span>"
    ]
  },
  {
    "objectID": "web_development.html",
    "href": "web_development.html",
    "title": "9  (WIP) Creating Web Apps and Dashboards in Python",
    "section": "",
    "text": "While these sessions haven’t been delivered yet, the accompanying course book is in the process of being written.\nClick here to open the HSMA web development book in a new tab, or take a look at it below.",
    "crumbs": [
      "Skills So Far",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>(WIP) Creating Web Apps and Dashboards in Python</span>"
    ]
  },
  {
    "objectID": "plot_examples.html",
    "href": "plot_examples.html",
    "title": "12  Example Outputs",
    "section": "",
    "text": "12.1 Dataframes",
    "crumbs": [
      "Data Manipulation and Visualisation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Example Outputs</span>"
    ]
  },
  {
    "objectID": "plot_examples.html#dataframes",
    "href": "plot_examples.html#dataframes",
    "title": "12  Example Outputs",
    "section": "",
    "text": "Medals per Country by YearMedals per Country by Year - Sorted by Multiple ColumnsTotal Medals per Country - All Time - Sorted by Single ColumnMedal Winners per event per yearMedal Winners per event per year - single sport and yearAthletes in most events per yearAthletes in most events per year - Details on Athlete with Most EventsAthlete with most total events competed inFiltering to a single athlete - Exact MatchFiltering to a single athlete - Partial MatchList of Events in YearCount of Events in Year\n\n\n\nimport pandas as pd\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\nmedals_per_country_per_year.sort_values(\"Total\", ascending=False).head(15)\n\n\n\n\n\n\n\n\n\nYear\nCountry\nNOC\nBronze\nSilver\nGold\nTotal\n\n\n\n\n45\n1904\nUSA\nUSA\n75.0\n79.0\n76.0\n230.0\n\n\n611\n1980\nRussia\nURS\n46.0\n69.0\n80.0\n195.0\n\n\n665\n1984\nUSA\nUSA\n30.0\n61.0\n82.0\n173.0\n\n\n81\n1908\nUK\nGBR\n37.0\n50.0\n56.0\n143.0\n\n\n707\n1988\nRussia\nURS\n46.0\n31.0\n54.0\n131.0\n\n\n596\n1980\nGermany\nGDR\n42.0\n37.0\n47.0\n126.0\n\n\n574\n1976\nRussia\nURS\n35.0\n41.0\n49.0\n125.0\n\n\n1265\n2016\nUSA\nUSA\n38.0\n37.0\n46.0\n121.0\n\n\n771\n1992\nRussia\nEUN\n29.0\n38.0\n45.0\n112.0\n\n\n215\n1932\nUSA\nUSA\n30.0\n36.0\n44.0\n110.0\n\n\n1096\n2008\nUSA\nUSA\n35.0\n39.0\n36.0\n110.0\n\n\n783\n1992\nUSA\nUSA\n37.0\n34.0\n37.0\n108.0\n\n\n493\n1968\nUSA\nUSA\n34.0\n28.0\n45.0\n107.0\n\n\n1181\n2012\nUSA\nUSA\n29.0\n28.0\n46.0\n103.0\n\n\n398\n1960\nRussia\nURS\n31.0\n29.0\n43.0\n103.0\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\nmedals_per_country_per_year.sort_values([\"Gold\", \"Total\"], ascending=True).head(15)\n\n\n\n\n\n\n\n\n\nYear\nCountry\nNOC\nBronze\nSilver\nGold\nTotal\n\n\n\n\n14\n1900\nColombia\nCOL\n0.0\n1.0\n0.0\n1.0\n\n\n25\n1900\nMexico\nMEX\n1.0\n0.0\n0.0\n1.0\n\n\n65\n1908\nAustria\nAUT\n1.0\n0.0\n0.0\n1.0\n\n\n111\n1920\nGreece\nGRE\n0.0\n1.0\n0.0\n1.0\n\n\n114\n1920\nLuxembourg\nLUX\n0.0\n1.0\n0.0\n1.0\n\n\n116\n1920\nNew Zealand\nNZL\n1.0\n0.0\n0.0\n1.0\n\n\n135\n1924\nHaiti\nHAI\n1.0\n0.0\n0.0\n1.0\n\n\n139\n1924\nJapan\nJPN\n1.0\n0.0\n0.0\n1.0\n\n\n141\n1924\nMonaco\nMON\n1.0\n0.0\n0.0\n1.0\n\n\n143\n1924\nNew Zealand\nNZL\n1.0\n0.0\n0.0\n1.0\n\n\n146\n1924\nPortugal\nPOR\n1.0\n0.0\n0.0\n1.0\n\n\n147\n1924\nRomania\nROU\n1.0\n0.0\n0.0\n1.0\n\n\n160\n1928\nChile\nCHI\n0.0\n1.0\n0.0\n1.0\n\n\n168\n1928\nHaiti\nHAI\n0.0\n1.0\n0.0\n1.0\n\n\n178\n1928\nPhilippines\nPHI\n1.0\n0.0\n0.0\n1.0\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\ntotal_medals_all_time = (\n    medals_per_country_per_year.drop(columns=[\"Year\", \"NOC\"])\n    .groupby('Country').sum()\n    .reset_index()\n    .sort_values('Total', ascending=False)\n    )\n\ntotal_medals_all_time.head(15)\n\n\n\n\n\n\n\n\n\nCountry\nBronze\nSilver\nGold\nTotal\n\n\n\n\n123\nUSA\n707.0\n802.0\n1035.0\n2544.0\n\n\n98\nRussia\n487.0\n498.0\n592.0\n1577.0\n\n\n41\nGermany\n490.0\n457.0\n442.0\n1389.0\n\n\n122\nUK\n298.0\n316.0\n278.0\n892.0\n\n\n38\nFrance\n282.0\n255.0\n233.0\n770.0\n\n\n57\nItaly\n198.0\n191.0\n219.0\n608.0\n\n\n20\nChina\n154.0\n163.0\n228.0\n545.0\n\n\n4\nAustralia\n197.0\n171.0\n150.0\n518.0\n\n\n110\nSweden\n188.0\n175.0\n150.0\n513.0\n\n\n48\nHungary\n172.0\n154.0\n178.0\n504.0\n\n\n60\nJapan\n161.0\n134.0\n142.0\n437.0\n\n\n37\nFinland\n120.0\n86.0\n104.0\n310.0\n\n\n18\nCanada\n137.0\n104.0\n64.0\n305.0\n\n\n97\nRomania\n120.0\n95.0\n88.0\n303.0\n\n\n82\nNetherlands\n114.0\n95.0\n88.0\n297.0\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nmedals_by_event = pd.read_csv(\"country_medals_by_event.csv\")\nmedals_by_event\n\n\n\n\n\n\n\n\n\nYear\nSport\nEvent\nBronze\nSilver\nGold\n\n\n\n\n0\n1896\nAthletics\nAthletics Men's 1,500 metres\nFrance\nUSA\nAustralia\n\n\n1\n1896\nAthletics\nAthletics Men's 100 metres\nHungary\nGermany\nUSA\n\n\n2\n1896\nAthletics\nAthletics Men's 110 metres Hurdles\nData Missing\nUK\nUSA\n\n\n3\n1896\nAthletics\nAthletics Men's 400 metres\nUK\nUSA\nUSA\n\n\n4\n1896\nAthletics\nAthletics Men's 800 metres\nGreece\nHungary\nAustralia\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n5211\n2016\nWrestling\nWrestling Women's Flyweight, Freestyle\nBulgaria\nAzerbaijan\nJapan\n\n\n5212\n2016\nWrestling\nWrestling Women's Heavyweight, Freestyle\nChina\nKazakhstan\nCanada\n\n\n5213\n2016\nWrestling\nWrestling Women's Light-Heavyweight, Freestyle\nKazakhstan\nRussia\nJapan\n\n\n5214\n2016\nWrestling\nWrestling Women's Lightweight, Freestyle\nIndia\nRussia\nJapan\n\n\n5215\n2016\nWrestling\nWrestling Women's Middleweight, Freestyle\nKazakhstan\nBelarus\nJapan\n\n\n\n\n5216 rows × 6 columns\n\n\n\n\n\n\n\nimport pandas as pd\n\nselected_year = 2012\nselected_sport = \"Judo\"\n\nmedals_by_event = pd.read_csv(\"country_medals_by_event.csv\")\nmedals_by_event\n\n\n\n\n\n\n\n\n\nYear\nSport\nEvent\nBronze\nSilver\nGold\n\n\n\n\n0\n1896\nAthletics\nAthletics Men's 1,500 metres\nFrance\nUSA\nAustralia\n\n\n1\n1896\nAthletics\nAthletics Men's 100 metres\nHungary\nGermany\nUSA\n\n\n2\n1896\nAthletics\nAthletics Men's 110 metres Hurdles\nData Missing\nUK\nUSA\n\n\n3\n1896\nAthletics\nAthletics Men's 400 metres\nUK\nUSA\nUSA\n\n\n4\n1896\nAthletics\nAthletics Men's 800 metres\nGreece\nHungary\nAustralia\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n5211\n2016\nWrestling\nWrestling Women's Flyweight, Freestyle\nBulgaria\nAzerbaijan\nJapan\n\n\n5212\n2016\nWrestling\nWrestling Women's Heavyweight, Freestyle\nChina\nKazakhstan\nCanada\n\n\n5213\n2016\nWrestling\nWrestling Women's Light-Heavyweight, Freestyle\nKazakhstan\nRussia\nJapan\n\n\n5214\n2016\nWrestling\nWrestling Women's Lightweight, Freestyle\nIndia\nRussia\nJapan\n\n\n5215\n2016\nWrestling\nWrestling Women's Middleweight, Freestyle\nKazakhstan\nBelarus\nJapan\n\n\n\n\n5216 rows × 6 columns\n\n\n\n\n\n\n\nimport pandas as pd\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nmost_events_per_year_by_athlete = athlete_statistics.value_counts(['Name', 'Country', 'Year']).reset_index()\n\nmost_events_per_year_by_athlete.head(15)\n\n\n\n\n\n\n\n\n\nName\nCountry\nYear\ncount\n\n\n\n\n0\nRobert Tait McKenzie\nCanada\n1932\n44\n\n\n1\nAlfrd (Arnold-) Hajs (Guttmann-)\nHungary\n1928\n28\n\n\n2\nMiltiades Manno\nHungary\n1932\n27\n\n\n3\nAlfred James Munnings\nUK\n1948\n25\n\n\n4\nWilhelm (William) Hunt Diederich\nUSA\n1932\n19\n\n\n5\nAcee Blue Eagle\nUSA\n1932\n18\n\n\n6\nJean Lucien Nicolas Jacoby\nLuxembourg\n1936\n17\n\n\n7\nStanisaw Noakowski\nPoland\n1928\n17\n\n\n8\nMahonri Mackintosh Young\nUSA\n1932\n16\n\n\n9\nPierre De Soete\nBelgium\n1928\n16\n\n\n10\nGeorges-mile Fauvelle\nFrance\n1928\n16\n\n\n11\nngel Zrraga Argelles\nMexico\n1928\n16\n\n\n12\nWillis Augustus Lee, Jr.\nUSA\n1920\n15\n\n\n13\nCharles Zeller Klauder\nUSA\n1928\n14\n\n\n14\nGeorg Vilhelm Lagerstedt\nSweden\n1936\n13\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nmost_events_per_year_by_athlete = athlete_statistics.value_counts(['Name', 'Country', 'Year']).reset_index()\n\nathlete_name_most_events = most_events_per_year_by_athlete.head(1)['Name'].values[0]\nathlete_name_most_events_year = most_events_per_year_by_athlete.head(1)['Year'].values[0]\n\nathlete_statistics[(athlete_statistics[\"Name\"] == athlete_name_most_events) &\n                    (athlete_statistics[\"Year\"] == athlete_name_most_events_year)].head(15)\n\n\n\n\n\n\n\n\n\nName\nSex\nAge\nHeight\nWeight\nCountry\nNOC\nYear\nSport\nEvent\nMedal\n\n\n\n\n32262\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Medals And...\nBronze\n\n\n32263\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32264\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32265\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32266\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32267\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32268\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32269\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32270\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32271\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32272\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32273\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32274\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32275\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32276\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nathlete_statistics.value_counts(['Name', 'Sex', 'Country']).reset_index()\n\n\n\n\n\n\n\n\n\nName\nSex\nCountry\ncount\n\n\n\n\n0\nRobert Tait McKenzie\nM\nCanada\n58\n\n\n1\nHeikki Ilmari Savolainen\nM\nFinland\n39\n\n\n2\nJoseph \"Josy\" Stoffel\nM\nLuxembourg\n38\n\n\n3\nIoannis Theofilakis\nM\nGreece\n36\n\n\n4\nTakashi Ono\nM\nJapan\n33\n\n\n...\n...\n...\n...\n...\n\n\n116737\nA. Brun\nF\nFrance\n1\n\n\n116738\nA. Buydens\nM\nBelgium\n1\n\n\n116739\nA. Charles Six\nM\nFrance\n1\n\n\n116740\nA. Christory\nM\nFrance\n1\n\n\n116741\nA. Darnis\nM\nFrance\n1\n\n\n\n\n116742 rows × 4 columns\n\n\n\n\n\n\n\nimport pandas as pd\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nchosen_athlete = \"Simone Arianne Biles\"\n\nathlete_statistics[athlete_statistics[\"Name\"] == chosen_athlete]\n\n\n\n\n\n\n\n\n\nName\nSex\nAge\nHeight\nWeight\nCountry\nNOC\nYear\nSport\nEvent\nMedal\n\n\n\n\n203896\nSimone Arianne Biles\nF\n19.0\n143.0\n47.0\nUSA\nUSA\n2016\nGymnastics\nGymnastics Women's Individual All-Around\nGold\n\n\n203897\nSimone Arianne Biles\nF\n19.0\n143.0\n47.0\nUSA\nUSA\n2016\nGymnastics\nGymnastics Women's Team All-Around\nGold\n\n\n203898\nSimone Arianne Biles\nF\n19.0\n143.0\n47.0\nUSA\nUSA\n2016\nGymnastics\nGymnastics Women's Floor Exercise\nGold\n\n\n203899\nSimone Arianne Biles\nF\n19.0\n143.0\n47.0\nUSA\nUSA\n2016\nGymnastics\nGymnastics Women's Horse Vault\nGold\n\n\n203900\nSimone Arianne Biles\nF\n19.0\n143.0\n47.0\nUSA\nUSA\n2016\nGymnastics\nGymnastics Women's Uneven Bars\nNaN\n\n\n203901\nSimone Arianne Biles\nF\n19.0\n143.0\n47.0\nUSA\nUSA\n2016\nGymnastics\nGymnastics Women's Balance Beam\nBronze\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nsearch_string = \"Ben\"\n\nathlete_statistics[athlete_statistics[\"Name\"].str.contains(search_string)]\n\n\n\n\n\n\n\n\n\nName\nSex\nAge\nHeight\nWeight\nCountry\nNOC\nYear\nSport\nEvent\nMedal\n\n\n\n\n271\nBenaissa Abed\nM\n23.0\n170.0\n51.0\nAlgeria\nALG\n1988\nBoxing\nBoxing Men's Flyweight\nNaN\n\n\n327\nBen Ali Beghouach\nM\n21.0\n186.0\n89.0\nAlgeria\nALG\n1988\nHandball\nHandball Men's Handball\nNaN\n\n\n328\nBen Ali Beghouach\nM\n29.0\n186.0\n89.0\nAlgeria\nALG\n1996\nHandball\nHandball Men's Handball\nNaN\n\n\n348\nDjillali Ben Brahim\nM\n27.0\n178.0\n71.0\nAlgeria\nALG\n1980\nJudo\nJudo Men's Lightweight\nNaN\n\n\n349\nReda Ben Chehima\nM\n26.0\n175.0\n75.0\nAlgeria\nALG\n2004\nFencing\nFencing Men's Sabre, Individual\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n219770\nLidija Benedeti-Lapajne\nF\n25.0\n175.0\n64.0\nSerbia\nYUG\n1984\nAthletics\nAthletics Women's High Jump\nNaN\n\n\n219771\nMarijan Bene\nM\n25.0\n170.0\n68.0\nSerbia\nYUG\n1976\nBoxing\nBoxing Men's Welterweight\nNaN\n\n\n221821\nBenson Mulomba\nM\n22.0\n177.0\n54.0\nZambia\nZAM\n1972\nAthletics\nAthletics Men's 800 metres\nNaN\n\n\n221843\nBenny Muziyo\nM\n23.0\nNaN\nNaN\nZambia\nZAM\n2016\nBoxing\nBoxing Men's Middleweight\nNaN\n\n\n222158\nGavin Ben Sutherland\nM\n37.0\n186.0\n78.0\nZimbabwe\nZIM\n2016\nArchery\nArchery Men's Individual\nNaN\n\n\n\n\n1617 rows × 11 columns\n\n\n\n\n\n\n\nimport pandas as pd\n\nselected_year = 2012\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nathlete_statistics[athlete_statistics[\"Year\"] == selected_year][['Sport', 'Event']].drop_duplicates().reset_index(drop=True).head(15)\n\n\n\n\n\n\n\n\n\nSport\nEvent\n\n\n\n\n0\nAthletics\nAthletics Men's 100 metres\n\n\n1\nTaekwondo\nTaekwondo Men's Welterweight\n\n\n2\nBoxing\nBoxing Men's Flyweight\n\n\n3\nJudo\nJudo Men's Half-Lightweight\n\n\n4\nAthletics\nAthletics Women's 100 metres\n\n\n5\nTaekwondo\nTaekwondo Men's Featherweight\n\n\n6\nWeightlifting\nWeightlifting Women's Lightweight\n\n\n7\nSwimming\nSwimming Women's 100 metres Butterfly\n\n\n8\nWeightlifting\nWeightlifting Men's Lightweight\n\n\n9\nAthletics\nAthletics Men's Shot Put\n\n\n10\nSwimming\nSwimming Men's 100 metres Freestyle\n\n\n11\nWeightlifting\nWeightlifting Men's Middle-Heavyweight\n\n\n12\nJudo\nJudo Women's Half-Lightweight\n\n\n13\nShooting\nShooting Men's Air Pistol, 10 metres\n\n\n14\nShooting\nShooting Men's Free Pistol, 50 metres\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nathlete_statistics[athlete_statistics[\"Year\"] == selected_year][['Sport', 'Event']].drop_duplicates().value_counts('Sport').reset_index().head(15)\n\n\n\n\n\n\n\n\n\nSport\ncount\n\n\n\n\n0\nAthletics\n47\n\n\n1\nSwimming\n34\n\n\n2\nWrestling\n18\n\n\n3\nCycling\n18\n\n\n4\nCanoeing\n16\n\n\n5\nWeightlifting\n15\n\n\n6\nShooting\n15\n\n\n7\nJudo\n14\n\n\n8\nGymnastics\n14\n\n\n9\nRowing\n14\n\n\n10\nBoxing\n13\n\n\n11\nSailing\n10\n\n\n12\nFencing\n10\n\n\n13\nTaekwondo\n8\n\n\n14\nDiving\n8",
    "crumbs": [
      "Data Manipulation and Visualisation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Example Outputs</span>"
    ]
  },
  {
    "objectID": "plot_examples.html#useful-lists-and-info-from-datasets",
    "href": "plot_examples.html#useful-lists-and-info-from-datasets",
    "title": "12  Example Outputs",
    "section": "12.2 Useful Lists and Info From Datasets",
    "text": "12.2 Useful Lists and Info From Datasets\n\nList of SportsList of Events in a particular yearEarliest and Latest Years in DatasetsOldest and Youngest Athletes in given year in given event\n\n\n\nimport pandas as pd\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nall_sports = athlete_statistics[\"Sport\"].drop_duplicates().tolist()\n\nprint(all_sports)\n\n['Hockey', 'Football', 'Wrestling', 'Athletics', 'Taekwondo', 'Judo', 'Boxing', 'Weightlifting', 'Shooting', 'Fencing', 'Swimming', 'Sailing', 'Synchronized Swimming', 'Triathlon', 'Equestrianism', 'Cycling', 'Volleyball', 'Handball', 'Rowing', 'Table Tennis', 'Tennis', 'Gymnastics', 'Trampolining', 'Badminton', 'Canoeing', 'Beach Volleyball', 'Basketball', 'Diving', 'Rugby', 'Rugby Sevens', 'Polo', 'Modern Pentathlon', 'Archery', 'Water Polo', 'Art Competitions', 'Golf', 'Figure Skating', 'Softball', 'Baseball', 'Rhythmic Gymnastics', 'Tug-Of-War', 'Ice Hockey', 'Lacrosse', 'Basque Pelota', 'Cricket', 'Croquet', 'Motorboating', 'Racquets', 'Jeu De Paume', 'Alpinism', 'Aeronautics', 'Roque']\n\n\n\n\n\nimport pandas as pd\n\nselected_year = 2012\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nathlete_statistics_year = athlete_statistics[athlete_statistics[\"Year\"] == selected_year]\n\nall_events = athlete_statistics_year[\"Event\"].drop_duplicates().tolist()\n\nprint(all_events)\n\n[\"Athletics Men's 100 metres\", \"Taekwondo Men's Welterweight\", \"Boxing Men's Flyweight\", \"Judo Men's Half-Lightweight\", \"Athletics Women's 100 metres\", \"Taekwondo Men's Featherweight\", \"Weightlifting Women's Lightweight\", \"Swimming Women's 100 metres Butterfly\", \"Weightlifting Men's Lightweight\", \"Athletics Men's Shot Put\", \"Swimming Men's 100 metres Freestyle\", \"Weightlifting Men's Middle-Heavyweight\", \"Judo Women's Half-Lightweight\", \"Shooting Men's Air Pistol, 10 metres\", \"Shooting Men's Free Pistol, 50 metres\", \"Boxing Men's Welterweight\", \"Volleyball Women's Volleyball\", \"Athletics Men's 5,000 metres\", \"Athletics Women's Marathon\", \"Judo Women's Heavyweight\", \"Athletics Men's 3,000 metres Steeplechase\", \"Wrestling Men's Lightweight, Greco-Roman\", \"Boxing Men's Light-Heavyweight\", \"Weightlifting Men's Heavyweight\", \"Boxing Men's Heavyweight\", \"Boxing Men's Lightweight\", \"Taekwondo Men's Flyweight\", \"Athletics Men's Marathon\", \"Boxing Men's Light-Flyweight\", \"Fencing Women's Foil, Individual\", \"Cycling Men's Road Race, Individual\", \"Wrestling Men's Light-Heavyweight, Freestyle\", \"Athletics Men's 800 metres\", \"Athletics Men's 1,500 metres\", \"Fencing Women's Sabre, Individual\", \"Athletics Men's Triple Jump\", \"Boxing Men's Bantamweight\", \"Boxing Men's Middleweight\", \"Rowing Women's Single Sculls\", \"Wrestling Men's Welterweight, Greco-Roman\", \"Swimming Men's 200 metres Butterfly\", \"Swimming Women's 100 metres Backstroke\", \"Shooting Men's Trap\", \"Handball Women's Handball\", \"Basketball Women's Basketball\", \"Athletics Women's 800 metres\", \"Swimming Women's 50 metres Freestyle\", \"Canoeing Men's Canadian Singles, 200 metres\", \"Canoeing Men's Canadian Doubles, 1,000 metres\", \"Judo Women's Middleweight\", \"Canoeing Men's Canadian Singles, 1,000 metres\", \"Swimming Men's 400 metres Individual Medley\", \"Athletics Women's 400 metres\", \"Athletics Men's 200 metres\", \"Rowing Women's Coxless Pairs\", \"Sailing Men's One Person Dinghy\", \"Shooting Men's Small-Bore Rifle, Prone, 50 metres\", \"Volleyball Men's Volleyball\", \"Hockey Women's Hockey\", \"Swimming Women's 400 metres Individual Medley\", \"Hockey Men's Hockey\", \"Tennis Men's Singles\", \"Wrestling Women's Flyweight, Freestyle\", \"Swimming Women's 800 metres Freestyle\", \"Swimming Women's 10 kilometres Open Water\", \"Sailing Men's Two Person Dinghy\", \"Basketball Men's Basketball\", \"Judo Men's Middleweight\", \"Handball Men's Handball\", \"Athletics Men's 20 kilometres Walk\", \"Sailing Women's One Person Dinghy\", \"Rowing Men's Lightweight Double Sculls\", \"Athletics Men's Hammer Throw\", \"Athletics Women's Discus Throw\", \"Canoeing Men's Kayak Doubles, 200 metres\", \"Athletics Women's Hammer Throw\", 'Tennis Mixed Doubles', \"Tennis Women's Doubles\", \"Rowing Men's Single Sculls\", \"Beach Volleyball Women's Beach Volleyball\", \"Swimming Men's 50 metres Freestyle\", \"Swimming Men's 100 metres Backstroke\", \"Rowing Women's Lightweight Double Sculls\", 'Equestrianism Mixed Jumping, Individual', \"Athletics Men's Discus Throw\", \"Table Tennis Men's Singles\", \"Taekwondo Women's Flyweight\", \"Sailing Women's Windsurfer\", \"Judo Men's Half-Middleweight\", \"Gymnastics Men's Floor Exercise\", \"Gymnastics Men's Rings\", \"Sailing Women's Two Person Dinghy\", \"Tennis Men's Doubles\", \"Judo Women's Extra-Lightweight\", \"Swimming Men's 400 metres Freestyle\", \"Swimming Men's 1,500 metres Freestyle\", \"Gymnastics Women's Individual All-Around\", \"Gymnastics Women's Floor Exercise\", \"Gymnastics Women's Uneven Bars\", \"Gymnastics Women's Balance Beam\", \"Cycling Men's Omnium\", \"Cycling Men's BMX\", \"Sailing Men's Windsurfer\", \"Canoeing Men's Canadian Singles, Slalom\", \"Rowing Men's Double Sculls\", \"Synchronized Swimming Women's Duet\", \"Judo Men's Half-Heavyweight\", \"Cycling Men's Mountainbike, Cross-Country\", \"Triathlon Men's Olympic Distance\", \"Athletics Men's Javelin Throw\", \"Wrestling Men's Heavyweight, Greco-Roman\", \"Weightlifting Women's Light-Heavyweight\", \"Gymnastics Men's Individual All-Around\", \"Gymnastics Men's Horse Vault\", \"Gymnastics Men's Parallel Bars\", \"Gymnastics Men's Horizontal Bar\", \"Gymnastics Men's Pommelled Horse\", \"Judo Men's Extra-Lightweight\", \"Athletics Women's Javelin Throw\", \"Wrestling Men's Featherweight, Freestyle\", \"Wrestling Men's Middleweight, Greco-Roman\", \"Weightlifting Men's Light-Heavyweight\", \"Weightlifting Women's Super-Heavyweight\", \"Athletics Men's Long Jump\", \"Wrestling Men's Super-Heavyweight, Greco-Roman\", \"Wrestling Men's Welterweight, Freestyle\", \"Weightlifting Men's Super-Heavyweight\", \"Swimming Women's 100 metres Freestyle\", \"Athletics Men's 50 kilometres Walk\", \"Athletics Men's 4 x 100 metres Relay\", \"Synchronized Swimming Women's Team\", \"Judo Men's Heavyweight\", \"Shooting Women's Air Pistol, 10 metres\", \"Swimming Women's 4 x 200 metres Freestyle Relay\", \"Shooting Women's Trap\", \"Archery Women's Individual\", \"Swimming Women's 200 metres Freestyle\", \"Swimming Women's 400 metres Freestyle\", \"Shooting Men's Skeet\", \"Water Polo Women's Water Polo\", \"Water Polo Men's Water Polo\", \"Rowing Men's Lightweight Coxless Fours\", \"Cycling Men's Team Pursuit, 4,000 metres\", \"Athletics Women's 400 metres Hurdles\", \"Gymnastics Women's Team All-Around\", \"Rowing Men's Coxed Eights\", \"Athletics Women's Pole Vault\", \"Canoeing Women's Kayak Fours, 500 metres\", \"Diving Women's Platform\", \"Cycling Women's BMX\", \"Rowing Men's Coxless Pairs\", \"Athletics Women's 1,500 metres\", \"Diving Women's Synchronized Platform\", 'Equestrianism Mixed Three-Day Event, Individual', 'Equestrianism Mixed Three-Day Event, Team', \"Swimming Women's 4 x 100 metres Freestyle Relay\", \"Sailing Men's One Person Heavyweight Dinghy\", \"Shooting Men's Rapid-Fire Pistol, 25 metres\", \"Shooting Women's Sporting Pistol, 25 metres\", \"Rowing Men's Coxless Fours\", \"Rowing Women's Coxed Eights\", \"Badminton Women's Doubles\", \"Canoeing Men's Kayak Fours, 1,000 metres\", \"Athletics Men's 400 metres Hurdles\", \"Athletics Men's 4 x 400 metres Relay\", \"Diving Men's Platform\", \"Swimming Women's 200 metres Individual Medley\", \"Swimming Women's 4 x 100 metres Medley Relay\", \"Rowing Women's Double Sculls\", \"Sailing Women's Three Person Keelboat\", \"Triathlon Women's Olympic Distance\", \"Swimming Men's 4 x 100 metres Freestyle Relay\", \"Swimming Men's 4 x 100 metres Medley Relay\", \"Canoeing Men's Kayak Singles, Slalom\", \"Cycling Women's Team Pursuit\", \"Cycling Women's Omnium\", \"Modern Pentathlon Women's Individual\", \"Rowing Women's Quadruple Sculls\", \"Modern Pentathlon Men's Individual\", \"Boxing Women's Middleweight\", \"Canoeing Women's Kayak Doubles, 500 metres\", \"Rowing Men's Quadruple Sculls\", \"Swimming Women's 200 metres Breaststroke\", \"Canoeing Women's Kayak Singles, Slalom\", \"Table Tennis Men's Team\", \"Swimming Men's 200 metres Freestyle\", \"Swimming Men's 4 x 200 metres Freestyle Relay\", \"Trampolining Men's Individual\", \"Cycling Women's Road Race, Individual\", \"Cycling Women's Individual Time Trial\", \"Cycling Men's Team Sprint\", \"Shooting Men's Air Rifle, 10 metres\", \"Swimming Men's 100 metres Butterfly\", \"Swimming Men's 200 metres Individual Medley\", \"Swimming Women's 200 metres Butterfly\", 'Equestrianism Mixed Dressage, Individual', 'Equestrianism Mixed Dressage, Team', 'Equestrianism Mixed Jumping, Team', \"Cycling Women's Mountainbike, Cross-Country\", \"Swimming Women's 200 metres Backstroke\", \"Athletics Men's Pole Vault\", \"Boxing Men's Light-Welterweight\", \"Swimming Men's 10 kilometres Open Water\", \"Canoeing Men's Canadian Doubles, Slalom\", \"Sailing Men's Skiff\", \"Swimming Women's 100 metres Breaststroke\", \"Athletics Women's 3,000 metres Steeplechase\", \"Athletics Women's 20 kilometres Walk\", \"Swimming Men's 200 metres Backstroke\", \"Table Tennis Women's Singles\", \"Table Tennis Women's Team\", \"Weightlifting Women's Middleweight\", \"Boxing Men's Super-Heavyweight\", \"Shooting Women's Skeet\", \"Shooting Men's Double Trap\", \"Taekwondo Women's Welterweight\", \"Cycling Women's Team Sprint\", \"Athletics Women's 100 metres Hurdles\", \"Cycling Women's Sprint\", \"Cycling Women's Keirin\", \"Rhythmic Gymnastics Women's Individual\", \"Badminton Women's Singles\", \"Canoeing Women's Kayak Singles, 200 metres\", \"Canoeing Women's Kayak Singles, 500 metres\", \"Diving Women's Springboard\", \"Cycling Men's Sprint\", \"Cycling Men's Keirin\", \"Judo Women's Lightweight\", \"Swimming Men's 100 metres Breaststroke\", \"Swimming Men's 200 metres Breaststroke\", \"Cycling Men's Individual Time Trial\", \"Shooting Men's Small-Bore Rifle, Three Positions, 50 metres\", \"Shooting Women's Air Rifle, 10 metres\", \"Diving Women's Synchronized Springboard\", \"Canoeing Men's Kayak Doubles, 1,000 metres\", \"Badminton Men's Doubles\", \"Athletics Men's 400 metres\", \"Athletics Men's 10,000 metres\", \"Canoeing Men's Kayak Singles, 200 metres\", \"Canoeing Men's Kayak Singles, 1,000 metres\", \"Tennis Women's Singles\", \"Wrestling Men's Lightweight, Freestyle\", \"Shooting Women's Small-Bore Rifle, Three Positions, 50 metres\", \"Diving Men's Springboard\", \"Athletics Women's 5,000 metres\", \"Athletics Women's 10,000 metres\", \"Archery Men's Individual\", \"Athletics Women's Heptathlon\", \"Beach Volleyball Men's Beach Volleyball\", \"Judo Women's Half-Middleweight\", \"Wrestling Men's Light-Heavyweight, Greco-Roman\", \"Badminton Men's Singles\", \"Fencing Men's Foil, Individual\", \"Wrestling Men's Featherweight, Greco-Roman\", \"Wrestling Men's Middleweight, Freestyle\", \"Wrestling Men's Super-Heavyweight, Freestyle\", \"Judo Men's Lightweight\", \"Wrestling Men's Heavyweight, Freestyle\", \"Wrestling Women's Lightweight, Freestyle\", \"Weightlifting Men's Bantamweight\", \"Athletics Women's 4 x 100 metres Relay\", \"Athletics Men's High Jump\", \"Athletics Women's 200 metres\", \"Athletics Men's 110 metres Hurdles\", \"Athletics Women's Long Jump\", \"Judo Women's Half-Heavyweight\", \"Athletics Women's Triple Jump\", \"Athletics Women's High Jump\", \"Athletics Men's Decathlon\", \"Football Men's Football\", \"Fencing Men's Sabre, Individual\", \"Fencing Men's Sabre, Team\", \"Rhythmic Gymnastics Women's Group\", \"Athletics Women's 4 x 400 metres Relay\", \"Athletics Women's Shot Put\", \"Weightlifting Women's Heavyweight\", \"Gymnastics Women's Horse Vault\", \"Wrestling Women's Heavyweight, Freestyle\", \"Trampolining Women's Individual\", \"Football Women's Football\", \"Boxing Women's Lightweight\", \"Taekwondo Women's Heavyweight\", \"Boxing Women's Flyweight\", \"Sailing Men's Two Person Keelboat\", \"Fencing Men's epee, Individual\", \"Wrestling Women's Middleweight, Freestyle\", \"Taekwondo Men's Heavyweight\", \"Diving Men's Synchronized Springboard\", 'Badminton Mixed Doubles', \"Fencing Women's epee, Individual\", \"Taekwondo Women's Featherweight\", \"Diving Men's Synchronized Platform\", \"Gymnastics Men's Team All-Around\", \"Archery Women's Team\", \"Archery Men's Team\", \"Fencing Men's Foil, Team\", \"Fencing Women's epee, Team\", \"Weightlifting Men's Middleweight\", \"Weightlifting Women's Flyweight\", \"Weightlifting Men's Featherweight\", \"Weightlifting Women's Featherweight\", \"Fencing Women's Foil, Team\"]\n\n\n\n\n\nimport pandas as pd\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\nearliest_year = medals_per_country_per_year[\"Year\"].min()\n\nlatest_year = medals_per_country_per_year[\"Year\"].max()\n\nprint(f\"The earliest year in the dataset is {earliest_year}\")\n\nprint(f\"The latest year in the dataset is {latest_year}\")\n\nThe earliest year in the dataset is 1896\nThe latest year in the dataset is 2016\n\n\n\n\n\nimport pandas as pd\n\nselected_year = 2012\nselected_sport = \"Gymnastics\"\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nathlete_statistics_filtered = athlete_statistics[(athlete_statistics[\"Year\"] == selected_year) & (athlete_statistics[\"Sport\"] == selected_sport)]\n\nyoungest_athlete = athlete_statistics_filtered[\"Age\"].min()\n\noldest_athlete = athlete_statistics_filtered[\"Age\"].max()\n\nprint(f\"The youngest athlete who competed in {selected_sport} in {selected_year} was {youngest_athlete:.0f} years old.\")\n\nprint(f\"The oldest athlete who competed in {selected_sport} in {selected_year} was{oldest_athlete:.0f} years old.\")\n\nThe youngest athlete who competed in Gymnastics in 2012 was 15 years old.\nThe oldest athlete who competed in Gymnastics in 2012 was39 years old.",
    "crumbs": [
      "Data Manipulation and Visualisation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Example Outputs</span>"
    ]
  },
  {
    "objectID": "plot_examples.html#plots",
    "href": "plot_examples.html#plots",
    "title": "12  Example Outputs",
    "section": "12.3 Plots",
    "text": "12.3 Plots\n\nSingle Medal Type - per Country by YearSingle Medal Type - per Country by Year - Single CountryAll Medal Types - Single CountryTotal Medals per Country - Bar Chart of Summed Values - Limiting Number of CountriesTotal Medals per Country - Stacked Bar ChartTotal Medals per Country - Stacked Bar Chart as Percentage of TotalAthlete Gender Balance by Year - Stacked Bar Chart (Parts of a Whole)Events per Sport Per Year\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nselected_countries = [\"UK\", \"USA\", \"Canada\", \"Australia\", \"China\", \"Russia\", \"France\", \"Germany\", \"Italy\"]\n\nselected_medal_type = \"Bronze\"\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\npx.line(medals_per_country_per_year[medals_per_country_per_year[\"Country\"].isin(selected_countries)],\n        x=\"Year\", y=selected_medal_type, color=\"Country\",\n        title=f\"{selected_medal_type} medals over time - subset of countries\")\n\n                                                \n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nchosen_country = \"UK\"\nselected_medal_type = \"Bronze\"\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\npx.line(medals_per_country_per_year[medals_per_country_per_year[\"Country\"] == chosen_country],\n        y=selected_medal_type, x=\"Year\",\n        title=f\"{selected_medal_type} medals for {chosen_country} over time\")\n\n                                                \n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nchosen_country = \"UK\"\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\nmedals_per_country_per_year_long = medals_per_country_per_year.melt(id_vars=[\"Year\", \"Country\", \"NOC\"])\n\npx.line(medals_per_country_per_year_long[medals_per_country_per_year_long[\"Country\"] == chosen_country],\n        y=\"value\", x=\"Year\", color=\"variable\",\n        color_discrete_sequence=[\"orange\", \"silver\", \"gold\", \"blue\"],\n        title=f\"Medals Won over Time - {chosen_country}\")\n\n                                                \n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nrows_to_display = 10\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\ntotal_medals_all_time = (\n    medals_per_country_per_year.drop(columns=[\"Year\", \"NOC\"])\n    .groupby('Country').sum()\n    .reset_index()\n    .sort_values('Total', ascending=False)\n    )\n\npx.bar(total_medals_all_time.head(rows_to_display), x='Country', y='Total',\n       title=f\"Total Number of Medals since 1896 - Top {rows_to_display} Countries\")\n\n                                                \n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\ntotal_medals_all_time = (\n    medals_per_country_per_year.drop(columns=[\"Year\", \"NOC\"])\n    .groupby('Country').sum()\n    .reset_index()\n    .sort_values('Total', ascending=False)\n    )\n\ntotal_medals_all_time_long = total_medals_all_time.drop(columns='Total').melt(id_vars=\"Country\")\n\npx.bar(total_medals_all_time_long,\n        x=\"Country\", y=\"value\", color=\"variable\",\n        color_discrete_sequence=[\"orange\", \"silver\", \"gold\"]\n        )\n\n                                                \n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\ntotal_medals_all_time = (\n    medals_per_country_per_year.drop(columns=[\"Year\", \"NOC\"])\n    .groupby('Country').sum()\n    .reset_index()\n    .sort_values('Total', ascending=False)\n    )\n\ntotal_medals_all_time_long = total_medals_all_time.drop(columns='Total').melt(id_vars=\"Country\")\n\ntotal_medals_all_time_long['Total'] = total_medals_all_time_long['value'].groupby(total_medals_all_time_long['Country']).transform('sum')\n\ntotal_medals_all_time_long['Percentage of Total'] = total_medals_all_time_long['value'] / total_medals_all_time_long['Total']\n\npx.bar(total_medals_all_time_long[total_medals_all_time_long['Country'].isin(total_medals_all_time_long.head(rows_to_display)['Country'].values)],\n       x=\"Country\", y=\"Percentage of Total\", color=\"variable\",\n       color_discrete_sequence=[\"orange\", \"silver\", \"gold\"],\n       title=f\"Breakdown of Medals by type - Top {rows_to_display} countries by total all-time medal count\")\n\n                                                \n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\ndistinct_athletes_per_year = athlete_statistics[['Name', 'Year','Country','Sex', 'Age', 'Height', 'Weight']].drop_duplicates()\n\nathlete_counts_by_sex_by_year = distinct_athletes_per_year.value_counts(['Sex', 'Year']).reset_index()\n\nathlete_counts_by_sex_by_year['total_athletes_both_sex_in_year'] = athlete_counts_by_sex_by_year['count'].groupby(athlete_counts_by_sex_by_year['Year']).transform('sum')\n\nathlete_counts_by_sex_by_year['Percentage of Athletes'] = athlete_counts_by_sex_by_year['count'] / athlete_counts_by_sex_by_year['total_athletes_both_sex_in_year']\n\npx.bar(athlete_counts_by_sex_by_year,\n       x=\"Year\", y=\"Percentage of Athletes\", color=\"Sex\",\n       title=f\"Change in Gender Split Over Time\")\n\n                                                \n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nselected_sport = \"Gymnastics\"\n\nathlete_statistics_sport = athlete_statistics[athlete_statistics[\"Sport\"] == selected_sport]\n\nevents_per_year_by_sport = (\n    athlete_statistics_sport[['Year', 'Event']]\n    .drop_duplicates()\n    .value_counts(['Year'])\n    .reset_index()\n)\n\npx.line(events_per_year_by_sport.sort_values(\"Year\"), x=\"Year\", y=\"count\",\n            markers=True, title=f\"{selected_sport} Events Per Olympics\",\n            range_x=[athlete_statistics.Year.min(), athlete_statistics.Year.max()])",
    "crumbs": [
      "Data Manipulation and Visualisation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Example Outputs</span>"
    ]
  },
  {
    "objectID": "plot_examples.html#maps",
    "href": "plot_examples.html#maps",
    "title": "12  Example Outputs",
    "section": "12.4 Maps",
    "text": "12.4 Maps\n\nNumber of Medals by Location - Static MapNumber of Medals by Location - Interactive Map\n\n\n\nimport pandas as pd\nimport geopandas\nimport matplotlib.pyplot as plt\n\nselected_year = 2012\nselected_medal_type=\"Bronze\"\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\ncountry_outlines = geopandas.read_file(\"countries_outlines.geojson\")\n\nmedals_per_country_per_year_gdf = pd.concat([\n    pd.merge(country_outlines, medals_per_country_per_year, left_on=\"id\", right_on=\"NOC\", how=\"inner\"),\n    pd.merge(country_outlines, medals_per_country_per_year, left_on=\"name\", right_on=\"Country\", how=\"inner\")\n]).drop_duplicates()\n\nfig, ax = plt.subplots(figsize=(15, 8))\nax = medals_per_country_per_year_gdf[medals_per_country_per_year_gdf[\"Year\"] == selected_year].plot(\n    \"Gold\", legend=True, ax=ax\n    )\nax.axis('off')\nplt.title(f\"Number of {selected_medal_type} Medals in {selected_year}\")\n\nText(0.5, 1.0, 'Number of Bronze Medals in 2012')\n\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport geopandas\nimport folium\n\nselected_year = 2012\nselected_medal_type=\"Bronze\"\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\ncountry_outlines = geopandas.read_file(\"countries_outlines.geojson\")\n\nmedals_per_country_per_year_gdf = pd.concat([\n    pd.merge(country_outlines, medals_per_country_per_year, left_on=\"id\", right_on=\"NOC\", how=\"inner\"),\n    pd.merge(country_outlines, medals_per_country_per_year, left_on=\"name\", right_on=\"Country\", how=\"inner\")\n]).drop_duplicates()\n\n#create base map\nworld_map_medals = folium.Map(\n    location=[50.71671, -3.50668],\n    zoom_start=2,\n    tiles='cartodbpositron'\n    )\n\n# create and add choropleth map\nchoropleth = folium.Choropleth(\n    geo_data=medals_per_country_per_year_gdf[medals_per_country_per_year_gdf[\"Year\"] == selected_year], # dataframe with geometry in it\n    data=medals_per_country_per_year_gdf[medals_per_country_per_year_gdf[\"Year\"] == selected_year], # dataframe with data in - may be the same dataframe or a different one\n    columns=['name', 'Gold'], # [key (field for geometry), field to plot]\n    key_on='feature.properties.Country'\n    )\n\nchoropleth = choropleth.add_to(world_map_medals)\n\nchoropleth = choropleth.geojson.add_child(\n    folium.features.GeoJsonTooltip(\n        ['name', 'Gold'],\n        labels=True\n        )\n)\n\nworld_map_medals\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Manipulation and Visualisation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Example Outputs</span>"
    ]
  },
  {
    "objectID": "what_is_quarto.html",
    "href": "what_is_quarto.html",
    "title": "13  What is Quarto?",
    "section": "",
    "text": "13.1 Quarto Code\nQuarto uses a document format called .qmd\nThis is a mixture of markdown (a widely-used text-based format that allows you to do things like create headers, links and formatted text through a series of simple text commands).\nA quarto document might look something like this. Don’t worry about the specifics for now - we’ll go through them all in detail in subsequent chapters, but hopefully this will give you a broad idea of how a quarto document is set up.\nHere is some text explaining to users how the monthly waiting list figures are calculated.\nThe waiting list as of {python} last_month.strftime('%d %B %Y') was {python} str(df_filtered.tail()['waiting_list_size'].values[0])\nThe output of that code above produces a standalone HTML document that looks like this when we open it up:\nNotice that in the document we are able to scroll, interact with the graph (including tooltips and zooming), and see calculated figures interspersed with the text.\nCan you see why the way Quarto documents are written is such a powerful format for allowing others to audit your code, and to allow version control software to keep track of the full code too? Unlike a Jupyter notebook, there is no additional metadata or embedded outputs that can confuse a version control system.",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>What is Quarto?</span>"
    ]
  },
  {
    "objectID": "what_is_quarto.html#quarto-code",
    "href": "what_is_quarto.html#quarto-code",
    "title": "13  What is Quarto?",
    "section": "",
    "text": "---\ntitle: \"Monthly Waiting List Report\"\nexecute:\n  echo: false\njupyter: python3\n---\n\n```{python}\nimport pandas as pd\nimport plotly.express as px\nfrom datetime import date\nfrom dateutil.relativedelta import relativedelta\n\nd = date.today()\nlast_month = d.replace(day=31) - relativedelta(months=1)\nearliest_month = last_month - relativedelta(months=18)\n\ndf = pd.read_csv('waiting_list.csv', parse_dates=[0])\ndf[\"date\"] = pd.to_datetime(df[\"date\"]).dt.date\ndf_filtered = df[(df['date'] &lt;= last_month) & (df['date'] &gt; earliest_month)]\n```\n\n```{python}\npx.line(df, x='date', y='waiting_list_size', title=\"Waiting List Over Last 18 Months\")\n```\n```{python}\ndf_filtered\n```",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>What is Quarto?</span>"
    ]
  },
  {
    "objectID": "what_is_quarto.html#more-advanced-quarto-examples",
    "href": "what_is_quarto.html#more-advanced-quarto-examples",
    "title": "13  What is Quarto?",
    "section": "13.2 More Advanced Quarto Examples",
    "text": "13.2 More Advanced Quarto Examples\nThis is a very simple example of what Quarto can do - but your documents can instead grow to include complex layouts and graphs. Let’s take a look at some great examples:\n\n\n\n\n\nTake a look at more examples here.",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>What is Quarto?</span>"
    ]
  },
  {
    "objectID": "what_is_quarto.html#next-steps",
    "href": "what_is_quarto.html#next-steps",
    "title": "13  What is Quarto?",
    "section": "13.3 Next Steps",
    "text": "13.3 Next Steps\nLet’s move on to writing our own Quarto documents from scratch.",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>What is Quarto?</span>"
    ]
  },
  {
    "objectID": "quarto_install_setup.html",
    "href": "quarto_install_setup.html",
    "title": "14  Installing and Setting Up Quarto",
    "section": "",
    "text": "14.1 VSCode Setup\nWithin VSCode, we will want to install the Quarto extension.\nIn VSCode, choose ‘extensions’ from the sidebar.\nSearch the extension marketplace for ‘Quarto’\nChoose the Quarto extension that shows up and install it.\nOnce installed, quarto documents will automatically show a ‘preview’ button at the top right.\nThis will not show up for other document types like .py files or .ipynb files.\nThe preview button will automatically open a preview server in either your default web browser or within vscode, so you can see how your document is looking as you work on it and iteratively update it. We’ll talk more about the details of this preview later in the document.",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Installing and Setting Up Quarto</span>"
    ]
  },
  {
    "objectID": "your_first_quarto_document.html",
    "href": "your_first_quarto_document.html",
    "title": "15  Writing and Previewing Your First Quarto Document",
    "section": "",
    "text": "15.1 Previewing the document\nThe next step for our quarto document is to preview it.\nWhen you click the preview button, a terminal window will open up and display some details about what’s happening behind the scenes.\nIf something goes wrong, there will be some red text!\nIf it goes right, it will look roughly like this screenshot.\nDepending on your Quarto extension settings, the previewed document will either open up within Visual Studio Code (usually as a panel on the right-hand-side of your screen), or it will open up in a new window. Opening up within VSCode should be the default behaviour for the extension.\nIf it appears to have not opened up anywhere, check the end of the message displayed in the terminal.\nIt will indicate the web address to navigate to to view the previewed document. The ‘port’ - the bit after the final colon - is randomly chosen when you begin the document preview, so will not be the same every time you start a new preview.\nWe can see here that the text is displayed and the URL matches what was displayed in the built-in terminal.",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Writing and Previewing Your First Quarto Document</span>"
    ]
  },
  {
    "objectID": "your_first_quarto_document.html#previewing-the-document",
    "href": "your_first_quarto_document.html#previewing-the-document",
    "title": "15  Writing and Previewing Your First Quarto Document",
    "section": "",
    "text": "Tip\n\n\n\nFor a single document, previewing the document saves a copy of the final output to the same folder as your `.qmd document.\nIn some more complex types of project, like books, there will be extra steps required to produce the final document - but for now, the preview button will work wonders!",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Writing and Previewing Your First Quarto Document</span>"
    ]
  },
  {
    "objectID": "your_first_quarto_document.html#making-changes",
    "href": "your_first_quarto_document.html#making-changes",
    "title": "15  Writing and Previewing Your First Quarto Document",
    "section": "15.2 Making Changes",
    "text": "15.2 Making Changes\nNow let’s make some changes to our document. Let’s add some additional text so that our file now looks like this.\n---\ntitle: \"My First Quarto Document\"\nformat: html\n---\n\nHello world!\n\nThis is some additional text.\nChanges will not appear in the document preview straight away; it doesn’t update live as you type.\nWhen you have finished making your change, click on the ‘preview’ button again. This will automatically save the changes you have made to your quarto document and update the preview to reflect those changes.\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWithin the Quarto extension options, there is a setting called ‘Render on Save’. Turning this on means you will not need to click on the preview button each time, but can be problematic if your document takes a long time to run, so you may not want this to be the default behaviour.",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Writing and Previewing Your First Quarto Document</span>"
    ]
  },
  {
    "objectID": "quarto_document_elements.html",
    "href": "quarto_document_elements.html",
    "title": "16  Quarto Document Elements",
    "section": "",
    "text": "16.1 Headers\nWithin our document, we will want to be able to separate out parts of the document with headers and subheaders.\nThe headers can also automatically be used to build an interactive table of contents for the document if we tell Quarto that we want a table of contents (or, later, if we’re creating a special kind of Quarto document that makes tables of contents automatically, like an ebook).\nHeaders are denoted using the # symbol. This is the same symbol we use for comments in our Python or R code, but if it’s just in a Quarto document (and not inside a code block - more on those in the next chapter), then it will be interpreted and rendered as a header.\nThe above will render in your document like this:",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quarto Document Elements</span>"
    ]
  },
  {
    "objectID": "quarto_document_elements.html#headers",
    "href": "quarto_document_elements.html#headers",
    "title": "16  Quarto Document Elements",
    "section": "",
    "text": "# This is a level 1 header\n## This is a level 2 header\n### This is a level 3 header\n#### This is a level 4 header\n##### This is a level 5 header\n\n\n\n\n\n\n\n\nTip\n\n\n\nMake sure there is a gap between the hash and the word you want to make into a title!\n#This won't work\n# But this will!",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quarto Document Elements</span>"
    ]
  },
  {
    "objectID": "quarto_document_elements.html#text-formatting",
    "href": "quarto_document_elements.html#text-formatting",
    "title": "16  Quarto Document Elements",
    "section": "16.2 Text Formatting",
    "text": "16.2 Text Formatting\nText can be formatted using the * character.\nYou must wrap the text in a single * for italics, ** for bold, and *** for bold/italic.\n*This is italic text*\nThis is italic text\n**This is bold text**\nThis is bold text\n***This is a mix***\nThis is a mix\nYou can *use* a mixture **in the** same ***sentence***.\nYou can use a mixture in the same sentence.",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quarto Document Elements</span>"
    ]
  },
  {
    "objectID": "quarto_document_elements.html#links",
    "href": "quarto_document_elements.html#links",
    "title": "16  Quarto Document Elements",
    "section": "16.3 Links",
    "text": "16.3 Links\nSimple links can be created like this:\n&lt;https://www.youtube.com/@hsma&gt;\nhttps://www.youtube.com/@hsma\nIf you don’t want the link to display the actual URL and would rather have some nice text, they are created with the following syntax:\n[Text to Display](https://your-link-here.com)\nFor example, you can link to the HSMA website like so:\n[Click here to open up the HSMA website](https://www.youtube.com/@hsma)\nClick here to open up the HSMA website",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quarto Document Elements</span>"
    ]
  },
  {
    "objectID": "quarto_document_elements.html#images",
    "href": "quarto_document_elements.html#images",
    "title": "16  Quarto Document Elements",
    "section": "16.4 Images",
    "text": "16.4 Images\nImages are created using a similar notation to links.\nThey are done in the format\n![]()\n\nThe ! lets markdown know it’s an image\nInside the [] you can optionally put a caption.\nInside the () you place a link to the image relative to the location of the document OR on the web.\n\n\n16.4.1 Web Image Example\n![](https://avatars.githubusercontent.com/u/107476423?s=400&u=84c1b49966ea958785a8954726c116b7952b2041&v=4)\n\n\n\n16.4.2 Local Image Example\n![Image of a white robot surrounded by dashboards, holding a magnifying glass and thinking](resources/cover_image.jpeg)\nThis points towards an image where there is a folder called ‘resources’ at the same level as the .qmd file being written. It moves into the resources folder, then looks for an image called cover_image.jpeg.\n\n\n\nImage of a white robot surrounded by dashboards, holding a magnifying glass and thinking",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quarto Document Elements</span>"
    ]
  },
  {
    "objectID": "quarto_document_elements.html#gifs",
    "href": "quarto_document_elements.html#gifs",
    "title": "16  Quarto Document Elements",
    "section": "16.5 Gifs",
    "text": "16.5 Gifs\nGifs are a little different - we embed them in something called an iframe.\nWe structure these blocks a little differently, starting with three backticks (``````) and {=html}\n{=html} &lt;div align=\"center\"&gt; &lt;iframe width=\"1200\" height=\"700\" src=\"assets/Code_pYlJdxlDDN.gif\"&gt;&lt;/iframe&gt; &lt;/div&gt;",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quarto Document Elements</span>"
    ]
  },
  {
    "objectID": "quarto_document_elements.html#embedding-a-webpage",
    "href": "quarto_document_elements.html#embedding-a-webpage",
    "title": "16  Quarto Document Elements",
    "section": "16.6 Embedding a webpage",
    "text": "16.6 Embedding a webpage\nYou can also embed entire webpages into your Quarto document.\n\n\n\n\n\n\nTip\n\n\n\nKeep in mind that some websites don’t like to be embedded and won’t work properly.\nCheck the preview and the final .html document to confirm that it’s ok!\n\n\n{=html} &lt;iframe width=\"1200\" height=\"800\" src=\"https://sites.google.com/nihr.ac.uk/hsma/home\" title=\"HSMA - the little book of DES\"&gt;&lt;/iframe&gt;",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quarto Document Elements</span>"
    ]
  },
  {
    "objectID": "quarto_document_elements.html#videos",
    "href": "quarto_document_elements.html#videos",
    "title": "16  Quarto Document Elements",
    "section": "16.7 Videos",
    "text": "16.7 Videos\nVideos hosted on sites like youtube or platforms like Google Drive can be embedded like so.\n\n\nWhile you can point directly to local .mpeg files, this could cause problems with file size of the resulting document.",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quarto Document Elements</span>"
    ]
  },
  {
    "objectID": "quarto_document_elements.html#lists",
    "href": "quarto_document_elements.html#lists",
    "title": "16  Quarto Document Elements",
    "section": "16.8 Lists",
    "text": "16.8 Lists\nLists can be created in a number of ways\n- list item 1\n- list item 2\n    - list sub item\n- list item 3\n\nlist item 1\nlist item 2\n\nlist sub item\n\nlist item 3\n\n* list item 1\n* list item 2\n    * list sub item\n* list item 3\n\nlist item 1\nlist item\n\nlist sub item\n\nlist item 3\n\n1. list item 1\n2. list item 2\n    a. list subitem\n4. list item 3\n\nlist item 1\nlist item 2\n\nlist subitem\n\nlist item 3\n\n1. list item 1\n1. list item 2\n    1. list subitem\n1. list item 3\n\nlist item 1\nlist item 2\n\nlist subitem\n\nlist item 3\n\n\n\n\n\n\n\nWarning\n\n\n\nLists will not work if you don’t include a blank line before starting them.\nFor example,\nMy shopping list contains\n- Now that's what I call 80s - vol 2 CD\n- Back To The Future II - Extended Mega Cut VHS\n- Return to Monkey Island\nwill not work, and will display like this:\nMy shopping list contains - Now that’s what I call 80s - vol 2 CD - Back To The Future II - Extended Mega Cut VHS - Return to Monkey Island\nIf we instead ensure there is a gap, like so:\nMy shopping list contains\n\n- Now that's what I call 80s - vol 2 CD\n- Back To The Future II - Extended Mega Cut VHS\n- Return to Monkey Island\nit will display as expected:\nMy shopping list contains\n\nNow that’s what I call 80s - vol 2 CD\nBack To The Future II - Extended Mega Cut VHS\nReturn to Monkey Island",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quarto Document Elements</span>"
    ]
  },
  {
    "objectID": "quarto_document_elements.html#callouts",
    "href": "quarto_document_elements.html#callouts",
    "title": "16  Quarto Document Elements",
    "section": "16.9 Callouts",
    "text": "16.9 Callouts\nCallouts allow you to draw attention to different parts of your document.\nThere are 5 key types:\n\n{.callout-tip}\n{.callout-note}\n{.callout-warning}\n{.callout-caution}\n{.callout-important}\n\nEach of these are created as follows\n:::{.callout-tip}\n# Here's an optional header inside the callout that will act as a title\n\nHere's the text in the callout - but I can include images, videos, links and more too.\n:::\n\n\n\n\n\n\nHere’s an optional header inside the callout that will act as a title\n\n\n\nHere’s the text in the callout - but I can include images, videos, links and more too.\n\n\n:::{.callout-note}\nHere's an example without a title.\n:::\n\n\n\n\n\n\nNote\n\n\n\nHere’s an example without a title.",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quarto Document Elements</span>"
    ]
  },
  {
    "objectID": "quarto_document_elements.html#expanders",
    "href": "quarto_document_elements.html#expanders",
    "title": "16  Quarto Document Elements",
    "section": "16.10 Expanders",
    "text": "16.10 Expanders\nSetting collapse=\"true\" in a callout means the callout block will start folded (collapsed), and users will have to click to expand it.\nThis can be very handy if you know some users will want to be provided with additional information but it may be overwhelming or not useful to everyone.\nWhatever you provide as a title will be visible to the reader before expanding.\n:::{.callout-note collapse=\"true\"}\n# Click me to expand\nThis was hidden!\n:::\n\n\n\n\n\n\nClick me to expand\n\n\n\n\n\nThis was hidden!\n\n\n\nIf you don’t provide a title, then the type of the callout (e.g. note, tip) will appear instead.\n:::{.callout-note collapse=\"true\"}\nThis was hidden!\n:::\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThis was hidden!",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quarto Document Elements</span>"
    ]
  },
  {
    "objectID": "quarto_document_elements.html#tabs",
    "href": "quarto_document_elements.html#tabs",
    "title": "16  Quarto Document Elements",
    "section": "16.11 Tabs",
    "text": "16.11 Tabs\nSometimes you may wish to provide lots of information while minimising scrolling, or you have several very similar bits of information to display (for example, the same data or graph but for several distinct teams).\nTabs can provide a very intuitive way of displaying this information, preventing your documents from becoming overly long and cumbersome.\n::: {.panel-tabset}\n\n## Tab 1\n\nHere's a cat!\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Orange_tabby_cat_sitting_on_fallen_leaves-Hisashi-01A.jpg/675px-Orange_tabby_cat_sitting_on_fallen_leaves-Hisashi-01A.jpg)\n\n## Tab 2\n\nHere's another cat!\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Sheba1.JPG/600px-Sheba1.JPG)\n\n:::\n\nTab 1Tab 2\n\n\nHere’s a cat! \n\n\nHere’s another cat! \n\n\n\n\n\n\n\n\n\nTip\n\n\n\nIn a later chapter, we’ll talk about how you could create a document that automatically creates the correct number of tabs for a given context - for example, if you are auto-generating documents for a series of regions, the number of teams - and therefore the number of tabs you want - may vary from document to document, and it can be more efficient and futureproof to use code to determine the tabs.",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quarto Document Elements</span>"
    ]
  },
  {
    "objectID": "code_chunks.html",
    "href": "code_chunks.html",
    "title": "17  Code Chunks",
    "section": "",
    "text": "17.1 Your first code block\nCode blocks take the following format:\nFor example, a Python block might look like this:\nAnd the output would be this.\nimport pandas as pd\n\naddress = 'https://raw.githubusercontent.com/MichaelAllen1966/' + \\\n            '1804_python_healthcare/master/titanic/data/train.csv'\n\ndata = pd.read_csv(address)\n\ndata.head(2)\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Code Chunks</span>"
    ]
  },
  {
    "objectID": "code_chunks.html#your-first-code-block",
    "href": "code_chunks.html#your-first-code-block",
    "title": "17  Code Chunks",
    "section": "",
    "text": "```{language}\nyour_code\n```\n\n```{python}\nimport pandas as pd\n\naddress = 'https://raw.githubusercontent.com/MichaelAllen1966/' + \\\n            '1804_python_healthcare/master/titanic/data/train.csv'\n\ndata = pd.read_csv(address)\n\ndata.head(2)\n```",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Code Chunks</span>"
    ]
  },
  {
    "objectID": "code_chunks.html#ducks-quacks-dont-echo",
    "href": "code_chunks.html#ducks-quacks-dont-echo",
    "title": "17  Code Chunks",
    "section": "17.2 (Duck’s Quack’s Don’t) Echo",
    "text": "17.2 (Duck’s Quack’s Don’t) Echo\nYou may have noticed that both the code and the output appeared after running the code block above.\nThis is because, by default, the ‘echo’ parameter is set to true, which means that the code used to create an output will be included.\nWe can override this parameter by making the first line of our code block be\n#| echo: false\n```{python}\n#| echo: false\nimport pandas as pd\n\naddress = 'https://raw.githubusercontent.com/MichaelAllen1966/' + \\\n            '1804_python_healthcare/master/titanic/data/train.csv'\n\ndata = pd.read_csv(address)\n\ndata.head(2)\n```\nNow you can see that we just get the output:\n\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nIn the next chapter, we’ll look at how to set these parameters on a per-document level - though you may find yourself wanting to overwrite the default you set for certain cells, so it’s useful to know both ways of doing it.\nFor multipage documents like books, you may even want to set these parameters at a project level.",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Code Chunks</span>"
    ]
  },
  {
    "objectID": "code_chunks.html#making-the-most-of-the-persistent-environment",
    "href": "code_chunks.html#making-the-most-of-the-persistent-environment",
    "title": "17  Code Chunks",
    "section": "17.3 Making the most of the persistent environment",
    "text": "17.3 Making the most of the persistent environment\nAs we move through the document, any variables we have created will persist.\nTherefore, in the later steps, we can refer to the same variables and reuse the same libraries without having to recreate them.\n\n```{python}\ndata.value_counts('Pclass')\n```\n\nPclass\n3    491\n1    216\n2    184\nName: count, dtype: int64",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Code Chunks</span>"
    ]
  },
  {
    "objectID": "code_chunks.html#charts",
    "href": "code_chunks.html#charts",
    "title": "17  Code Chunks",
    "section": "17.4 Charts",
    "text": "17.4 Charts\nMost outputs can be displayed in Quarto documents - static and interactive charts and static and interactive maps are supported by default.\n\n```{python}\nimport plotly.express as px\n\npx.bar(data.value_counts('Sex'),\n       title=\"Number of Passengers by Recorded Sex\")\n```\n\n                                                \n\n\n\n```{python}\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10,5))\npclass_counts = pd.DataFrame(data.value_counts('Pclass')).reset_index()\nplt.bar(x=pclass_counts['Pclass'], height=pclass_counts['count'])\nfig.show()\n```\n\nC:\\Users\\Sammi\\AppData\\Local\\Temp\\ipykernel_30328\\3960798882.py:6: UserWarning:\n\nFigureCanvasAgg is non-interactive, and thus cannot be shown",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Code Chunks</span>"
    ]
  },
  {
    "objectID": "code_chunks.html#maps",
    "href": "code_chunks.html#maps",
    "title": "17  Code Chunks",
    "section": "17.5 Maps",
    "text": "17.5 Maps\n\n17.5.1 Static Maps\n\n\n\n\n\n\nTip\n\n\n\nFor more details about this code, head to the HSMA Geographic Modelling and Visualisation Book - Static Maps\n\n\nAs static maps created using the geopandas plot method are just matplotlib plots, we don’t need to do anything special with them.\n\n```{python}\nimport geopandas\n\nlsoa_2011_crime_figures_df = geopandas.read_file(\"https://github.com/hsma-programme/h6_3b_advanced_qgis_mapping_python/raw/main/h6_3b_advanced_qgis_and_mapping_in_python/example_code/lsoa_2011_sw5forces_crime_figures.gpkg\")\n\nlsoa_2011_crime_figures_df.plot(column=\"sw_5forces_street_by_lsoa_Other crime\")\n```\n\n\n\n\n\n\n\n\n\n\n17.5.2 Interactive Maps\n\n\n\n\n\n\nTip\n\n\n\nFor more details about this code, head to the HSMA Geographic Modelling and Visualisation Book - Interactive Maps\n\n\n\n```{python}\nimport folium\n\ngp_list = pd.read_csv(\"https://github.com/hsma-programme/h6_3b_advanced_qgis_mapping_python/raw/main/h6_3b_advanced_qgis_and_mapping_in_python/example_code/gp_surgery_locations_plus_patient_list_size.csv\")\n\ngp_list_gdf = geopandas.GeoDataFrame(\n    gp_list, # Our pandas dataframe\n    geometry = geopandas.points_from_xy(\n        gp_list['result_eastings'], # Our 'x' column (horizontal position of points)\n        gp_list['result_northings'] # Our 'y' column (vertical position of points)\n        ),\n    crs = 'EPSG:27700'\n    )\n\n# Convert to 4326 (lat/long) for working with Folium\ngp_list_gdf = gp_list_gdf.to_crs('EPSG:4326')\n\n# Filter out instances with no 'list' (e.g. things like specialist clinics)\ngp_list = gp_list[~gp_list['Total List Size'].isna()]\n\n# reduce to the southwest to not overload Folium\nxmin, xmax = -6.449974,-2.717735\nymin, ymax =  49.814737,51.246969\ngp_list_gdf_sw = gp_list_gdf.cx[xmin:xmax, ymin:ymax]\n\n# Filter out instances with no geometry\ngp_list_gdf_sw = gp_list_gdf_sw[~gp_list_gdf_sw['geometry'].is_empty]\n\n# Create a geometry list from the GeoDataFrame\ngeo_df_list = [[point.xy[1][0], point.xy[0][0]] for point in gp_list_gdf_sw.geometry]\n\ngp_map_tooltip = folium.Map(\n    location=[50.7, -4.2],\n    zoom_start=8,\n    tiles='openstreetmap',\n    )\n\nfor i, coordinates in enumerate(geo_df_list):\n\n    gp_map_tooltip = gp_map_tooltip.add_child(\n        folium.Marker(\n            location=coordinates,\n            tooltip=gp_list_gdf_sw['name'].values[i],\n            icon=folium.Icon(icon=\"user-md\", prefix='fa', color=\"black\")\n            )\n     )\n\ngp_map_tooltip\n```\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Code Chunks</span>"
    ]
  },
  {
    "objectID": "code_chunks.html#additional-code-chunk-options",
    "href": "code_chunks.html#additional-code-chunk-options",
    "title": "17  Code Chunks",
    "section": "17.6 Additional Code Chunk Options",
    "text": "17.6 Additional Code Chunk Options\nLike #| echo: false, there are a range of different code chunk options that can be set.\nEach value needs to be set as #| parameter: value on its own line at the start of the code block.\nThe key ones are\n\neval\n\nthis determines whether the cell will actually run or not\ntrue or false\n\necho\n\nthis determines whether the code is included\ntrue or false\n\ncode-fold\n\nthis allows you to include the code as a collapsible element\ntrue (put it in a collapsible element and collapse it), false (don’t collapse - default), show (put it in a collapsible element but leave it expanded by default)\n\nlabel\n\nthis gives the code cell an internal label that will appear in the terminal printout when the code is being rendered, which can make it a lot easier to work out which code cell is the culprit if you receive errors\na-continuous-string-describing-the-cell\n\nwarning\n\nthis determines whether warning messages outputted by any of the actions in the cell will be included in the output\ntrue/false\n\noutput\n\nthis determines whether the output of the code is actually shown. Can be useful for preprocessing steps you want to execute\ntrue/false/asis\n\nasis is a special parameter we’ll cover more later - it can be helpful for producing, for example, automated tabsets in a loop\n\n\nfig-cap\n\na caption to display below an outputted figure\n“A string, surrounded by quotation marks”\n\n\nYou can find a full list of the different options in the Quarto documentation\nHere’s an example with multiple options set\n```{python}\n#| code-fold: true\n#| label: multiple-code-chunk-options-example\n#| fig-cap: \"A bar plot\"\n#| warning: false\nfig, ax = plt.subplots()\npclass_counts = pd.DataFrame(data.value_counts('Pclass')).reset_index()\nplt.bar(x=pclass_counts['Pclass'], height=pclass_counts['count'])\nfig.show()\n```\n\n\nCode\nfig, ax = plt.subplots()\npclass_counts = pd.DataFrame(data.value_counts('Pclass')).reset_index()\nplt.bar(x=pclass_counts['Pclass'], height=pclass_counts['count'])\nfig.show()\n\n\n\n\n\n\n\n\nFigure 17.1: A bar plot",
    "crumbs": [
      "An Introduction to Reproducible Document Creation with Quarto",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Code Chunks</span>"
    ]
  },
  {
    "objectID": "automating_spreadsheets_xlsx_writer.html",
    "href": "automating_spreadsheets_xlsx_writer.html",
    "title": "29  (Coming Soon) Automating Spreadsheet Creation with the XlsxWriter Package",
    "section": "",
    "text": "As much as we want our end users to",
    "crumbs": [
      "Further Automation",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>(Coming Soon) Automating Spreadsheet Creation with the XlsxWriter Package</span>"
    ]
  },
  {
    "objectID": "r_inspired_python_packages.html",
    "href": "r_inspired_python_packages.html",
    "title": "59  (Coming Soon) R-Inspired Python Packages",
    "section": "",
    "text": "59.1 Plotnine",
    "crumbs": [
      "R",
      "<span class='chapter-number'>59</span>  <span class='chapter-title'>(Coming Soon) R-Inspired Python Packages</span>"
    ]
  },
  {
    "objectID": "r_inspired_python_packages.html#section",
    "href": "r_inspired_python_packages.html#section",
    "title": "59  (Coming Soon) R-Inspired Python Packages",
    "section": "59.2 ",
    "text": "59.2",
    "crumbs": [
      "R",
      "<span class='chapter-number'>59</span>  <span class='chapter-title'>(Coming Soon) R-Inspired Python Packages</span>"
    ]
  }
]